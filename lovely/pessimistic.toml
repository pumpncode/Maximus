[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

    # Add flag to Wheel of Fortune
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.06*G.SETTINGS.GAMESPEED, blockable = false, blocking = false, func = function()
    play_sound('tarot2', 0.76, 0.4);return true end}))
play_sound('tarot2', 1, 0.4)
used_tarot:juice_up(0.3, 0.5)
'''
position = "after"
payload = '''
SMODS.calculate_context({mxms_failed_prob = true, odds = self.ability.extra - G.GAME.probabilities.normal, card = self})
'''
match_indent = true
times = 1


    # Add flag to Glass Card Break (Stone Thrower will not scale Pessimistic)
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
for k, v in ipairs(cards_destroyed) do
    if v.shattered then glass_shattered[#glass_shattered+1] = v end
end
'''
position = "at"
payload = '''
for k, v in ipairs(cards_destroyed) do
    if v.shattered then 
        glass_shattered[#glass_shattered+1] = v 
        if not next(SMODS.find_card('j_mxms_stone_thrower')) then
            local card_odds = (type(v.ability.extra) == "number" and v.ability.extra) or (v.ability.extra.odds and type(v.ability.extra.odds) == "number" and v.ability.extra.odds) or nil
            if card_odds then
                SMODS.calculate_context({mxms_failed_prob = true, odds = card_odds - G.GAME.probabilities.normal, card = self})
            end
        end
    end
end
'''
match_indent = true
times = 1


    # Add flag to Hallucination
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if pseudorandom('halu'..G.GAME.round_resets.ante) < G.GAME.probabilities.normal/self.ability.extra then
    G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1
    G.E_MANAGER:add_event(Event({
        trigger = 'before',
        delay = 0.0,
        func = (function()
                local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, 'hal')
                card:add_to_deck()
                G.consumeables:emplace(card)
                G.GAME.consumeable_buffer = 0
            return true
        end)}))
    card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize('k_plus_tarot'), colour = G.C.PURPLE})
    return nil, true
'''
position = "after"
payload = '''
else
    SMODS.calculate_context({mxms_failed_prob = true, odds = self.ability.extra - G.GAME.probabilities.normal, card = self})
'''
match_indent = true
times = 1


    # Add flag to Gros Michel/Cavendish (Includes fridge_mod so gain scales based on Refrigerator joker)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
G.E_MANAGER:add_event(Event({
    func = function()
        play_sound('tarot1')
        self.T.r = -0.2
        self:juice_up(0.3, 0.4)
        self.states.drag.is = true
        self.children.center.pinch.x = true
        G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.3, blockable = false,
            func = function()
                    G.jokers:remove_card(self)
                    self:remove()
                    self = nil
                return true; end})) 
        return true
    end
})) 
if self.ability.name == 'Gros Michel' then G.GAME.pool_flags.gros_michel_extinct = true end
'''
position = "at"
payload = '''
G.E_MANAGER:add_event(Event({
    func = function()
        play_sound('tarot1')
        self.T.r = -0.2
        self:juice_up(0.3, 0.4)
        self.states.drag.is = true
        self.children.center.pinch.x = true
        G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.3, blockable = false,
            func = function()
                    G.jokers:remove_card(self)
                    self:remove()
                    SMODS.calculate_context({mxms_failed_prob = true, odds = self.ability.extra.odds - G.GAME.probabilities.normal, card = self})
                    self = nil
                return true; end})) 
        return true
    end
})) 
if self.ability.name == 'Gros Michel' then G.GAME.pool_flags.gros_michel_extinct = true end
'''
match_indent = true
times = 1


    # Add flag to 8 Ball
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if (context.other_card:get_id() == 8) and (pseudorandom('8ball') < G.GAME.probabilities.normal/self.ability.extra) then
    G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1
    return {
        extra = {focus = self, message = localize('k_plus_tarot'), func = function()
            G.E_MANAGER:add_event(Event({
                trigger = 'before',
                delay = 0.0,
                func = (function()
                        local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, '8ba')
                        card:add_to_deck()
                        G.consumeables:emplace(card)
                        G.GAME.consumeable_buffer = 0
                    return true
                end)}))
        end},
        colour = G.C.SECONDARY_SET.Tarot,
        card = self
    }
end
'''
position = "at"
payload = '''
if (context.other_card:get_id() == 8) then
    if (pseudorandom('8ball') < G.GAME.probabilities.normal/self.ability.extra) then
        G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1
        return {
            extra = {focus = self, message = localize('k_plus_tarot'), func = function()
                G.E_MANAGER:add_event(Event({
                    trigger = 'before',
                    delay = 0.0,
                    func = (function()
                            local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, '8ba')
                            card:add_to_deck()
                            G.consumeables:emplace(card)
                            G.GAME.consumeable_buffer = 0
                        return true
                    end)}))
            end},
            colour = G.C.SECONDARY_SET.Tarot,
            card = self
        }
    else
        SMODS.calculate_context({mxms_failed_prob = true, odds = self.ability.extra - G.GAME.probabilities.normal, card = self})
    end
end
'''
match_indent = true
times = 1


    # Add flag to Business Card
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Business Card' and
    context.other_card:is_face() and
    pseudorandom('business') < G.GAME.probabilities.normal/self.ability.extra then
        G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + 2
        G.E_MANAGER:add_event(Event({func = (function() G.GAME.dollar_buffer = 0; return true end)}))
        return {
            dollars = 2,
            card = self
        }
    end
'''
position = "at"
payload = '''
if self.ability.name == 'Business Card' and
context.other_card:is_face() then
    if pseudorandom('business') < G.GAME.probabilities.normal/self.ability.extra then
        G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + 2
        G.E_MANAGER:add_event(Event({func = (function() G.GAME.dollar_buffer = 0; return true end)}))
        return {
            dollars = 2,
            card = self
        }
    else
        SMODS.calculate_context({mxms_failed_prob = true, odds = self.ability.extra - G.GAME.probabilities.normal, card = self})
    end
end
'''
match_indent = true
times = 1

    #Talisman version of Business Card patch
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Business Card' and
    context.other_card:is_face() and
    pseudorandom('business') < G.GAME.probabilities.normal/self.ability.extra then
        G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + 2
        if not Talisman.config_file.disable_anims then G.E_MANAGER:add_event(Event({func = (function() G.GAME.dollar_buffer = 0; return true end)})) else G.GAME.dollar_buffer = 0 end
        return {
            dollars = 2,
            card = self
        }
    end
'''
position = "at"
payload = '''
if self.ability.name == 'Business Card' and
context.other_card:is_face() then
    if pseudorandom('business') < G.GAME.probabilities.normal/self.ability.extra then
        G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + 2
        if not Talisman.config_file.disable_anims then G.E_MANAGER:add_event(Event({func = (function() G.GAME.dollar_buffer = 0; return true end)})) else G.GAME.dollar_buffer = 0 end
        return {
            dollars = 2,
            card = self
        }
    else
        SMODS.calculate_context({mxms_failed_prob = true, odds = self.ability.extra - G.GAME.probabilities.normal, card = self})
    end
end
'''
match_indent = true
times = 1


    # Add flag to Bloodstone
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name ==  'Bloodstone' and
context.other_card:is_suit("Hearts") and 
pseudorandom('bloodstone') < G.GAME.probabilities.normal/self.ability.extra.odds then
    return {
        x_mult = self.ability.extra.Xmult,
        card = self
    }
end
'''
position = "at"
payload = '''
if self.ability.name ==  'Bloodstone' and
context.other_card:is_suit("Hearts") then 
    if pseudorandom('bloodstone') < G.GAME.probabilities.normal/self.ability.extra.odds then
        return {
            x_mult = self.ability.extra.Xmult,
            card = self
        }
    else
        SMODS.calculate_context({mxms_failed_prob = true, odds = self.ability.extra.odds - G.GAME.probabilities.normal, card = self})
    end
end
'''
match_indent = true
times = 1


    # Add flag to Reserved Parking
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Reserved Parking' and
context.other_card:is_face() and
pseudorandom('parking') < G.GAME.probabilities.normal/self.ability.extra.odds then
    if context.other_card.debuff then
        return {
            message = localize('k_debuffed'),
            colour = G.C.RED,
            card = self,
        }
    else
        G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + self.ability.extra.dollars
        G.E_MANAGER:add_event(Event({func = (function() G.GAME.dollar_buffer = 0; return true end)}))
        return {
            dollars = self.ability.extra.dollars,
            card = self
        }
    end
end
'''
position = "at"
payload = '''
if self.ability.name == 'Reserved Parking' and
context.other_card:is_face() then
    if pseudorandom('parking') < G.GAME.probabilities.normal/self.ability.extra.odds then
        if context.other_card.debuff then
            return {
                message = localize('k_debuffed'),
                colour = G.C.RED,
                card = self,
            }
        else
            G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + self.ability.extra.dollars
            G.E_MANAGER:add_event(Event({func = (function() G.GAME.dollar_buffer = 0; return true end)}))
            return {
                dollars = self.ability.extra.dollars,
                card = self
            }
        end
    else
        SMODS.calculate_context({mxms_failed_prob = true, odds = self.ability.extra.odds - G.GAME.probabilities.normal, card = self})
    end
end
'''
match_indent = true
times = 1

    #Talisman version of Reserved Parking patch
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Reserved Parking' and
context.other_card:is_face() and
pseudorandom('parking') < G.GAME.probabilities.normal/self.ability.extra.odds then
    if context.other_card.debuff then
        return {
            message = localize('k_debuffed'),
            colour = G.C.RED,
            card = self,
        }
    else
        G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + self.ability.extra.dollars
        if not Talisman.config_file.disable_anims then G.E_MANAGER:add_event(Event({func = (function() G.GAME.dollar_buffer = 0; return true end)})) else G.GAME.dollar_buffer = 0 end
        return {
            dollars = self.ability.extra.dollars,
            card = self
        }
    end
end
'''
position = "at"
payload = '''
if self.ability.name == 'Reserved Parking' and
context.other_card:is_face() then
    if pseudorandom('parking') < G.GAME.probabilities.normal/self.ability.extra.odds then
        if context.other_card.debuff then
            return {
                message = localize('k_debuffed'),
                colour = G.C.RED,
                card = self,
            }
        else
            G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + self.ability.extra.dollars
            if not Talisman.config_file.disable_anims then G.E_MANAGER:add_event(Event({func = (function() G.GAME.dollar_buffer = 0; return true end)})) else G.GAME.dollar_buffer = 0 end
            return {
                dollars = self.ability.extra.dollars,
                card = self
            }
        end
    else
        SMODS.calculate_context({mxms_failed_prob = true, odds = self.ability.extra.odds - G.GAME.probabilities.normal, card = self})
    end
end
'''
match_indent = true
times = 1


    # Add flag to Space Joker
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Space Joker' and pseudorandom('space') < G.GAME.probabilities.normal/self.ability.extra then
    return {
        card = self,
        level_up = true,
        message = localize('k_level_up_ex')
    }
end
'''
position = "at"
payload = '''
if self.ability.name == 'Space Joker' then
    if pseudorandom('space') < G.GAME.probabilities.normal/self.ability.extra then
        return {
            card = self,
            level_up = true,
            message = localize('k_level_up_ex')
        }
    else
        SMODS.calculate_context({mxms_failed_prob = true, odds = self.ability.extra - G.GAME.probabilities.normal, card = self})
    end
end
'''
match_indent = true
times = 1